name: 'VYROW'
description: 'Render all Markdown documents in your repository into HTML documents.'
branding:
  color: purple
  icon: cast

inputs:
  source-directory:
    description: 'The source directory containing the source Markdown files.'
    required: true
    default: '.'

  pandoc-script:
    description: 'The script that runs the `pandoc` program. You can provide a path to your own script that runs `pandoc` differently.'
    required: true
    default: __DEFAULT

  pandoc-template:
    description: 'The pandoc HTML template.'
    required: true
    default: __DEFAULT

  stylesheet:
    description: 'The stylesheet file to use for the rendered website.'
    required: true
    default: __DEFAULT

  stylesheet-base-href:
    description: 'Because all links in the Markdown documents need to stay relative we cannot add the `<base />` tag in the `<head>` element of a single output document. Instead, we can prefix only the CSS stylesheet file to behave appropriately. More in the ‹readme› of the repository of this GH Action.'
    required: true
    default: '/'

  head:
    description: 'A file that contains some additional HTML data to input into `<head>`.'
    required: true
    default: __DEFAULT

  copy-master:
    description: 'Copy all files in the master branch to the `dist` directory first. Turned off by default.'
    required: true
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: 'Install `pandoc`'
      working-directory: ${{ github.action_path }}
      shell: bash
      run: ./install-pandoc.sh

    - name: 'Install `pandoc-katex`'
      working-directory: ${{ github.action_path }}
      shell: bash
      run: ./install-pandoc-katex.sh

    - name: 'Conditionally copy all documents (and other files as well) to the `dist` directory'
      working-directory: ${{ inputs.source-directory }}
      shell: bash
      run: | # copy all files that are not the `dist` directory itself or the `.git` directory
        if [ "${{ inputs.copy-master }}" -eq "true" ]; then
          mkdir -p dist
          ls -A | grep -v '^dist$' | grep -v '^.git$' |
          xargs -d '\n' cp -r -t 'dist' --
        fi

    - id: vars
      name: 'Process input variables'
      shell: bash
      run: | # process the variables; because the `github.action_path` cannot be used in the `default` fields of the parameters’ definition we have to apply default values manually
        pandoc_script="${{ inputs.pandoc-script }}"
        if [ "$pandoc_script" = "__DEFAULT" ]; then
          pandoc_script="${{ github.action_path }}/pandoc.sh"
        fi
        echo "::set-output name=pandoc-script::$pandoc_script"

        pandoc_template="${{ inputs.pandoc-template }}"
        if [ "$pandoc_template" = "__DEFAULT" ]; then
          pandoc_template="${{ github.action_path }}/template/pandoc-template.html"
        fi
        echo "::set-output name=pandoc-template::$pandoc_template"

        stylesheet="${{ inputs.stylesheet }}"
        if [ "$stylesheet" = "__DEFAULT" ]; then
          stylesheet="${{ github.action_path }}/template/style.css"
        fi
        echo "::set-output name=stylesheet::$stylesheet"

        head="${{ inputs.head }}"
        if [ "$head" = "__DEFAULT" ]; then
          head="${{ github.action_path }}/template/head.html"
        fi
        echo "::set-output name=head::$head"

    - name: 'Render the Markdown documents'
      shell: bash
      working-directory: ${{ inputs.source-directory }}/dist
      run: |
        tmp="${{ steps.vars.outputs.stylesheet }}"
        find . -type f | grep '.md$' |
        while read file; do
          ${{ steps.vars.outputs.pandoc-script }} \
            "$file" \
            "${{ steps.vars.outputs.pandoc-template }}" \
            "${{ inputs.stylesheet-base-href }}${tmp##*/}" \
            "${{ steps.vars.outputs.head }}" \
              > "${file%???}"".html"
        done

    - name: 'Remove all raw Markdown documents (HTML documents have already been generated)'
      shell: bash
      working-directory: ${{ inputs.source-directory }}/dist
      run: |
        find . -type f | grep '.md$' |
        xargs -d '\n' rm --

    - name: 'Fix all `.md` links'
      shell: bash
      working-directory: ${{ inputs.source-directory }}/dist
      # links are without the `.html` at the end — GH Pages handles it
      run: |
        find . -type f | grep '.html$' |
        while read file; do
          perl -i -pe 's/(")([^"]+)(\.md)(\#[^"]+)?(")/"$2$4"/gm' -- "$file"
        done

    - name: 'Rename the main readme file'
      shell: bash
      working-directory: ${{ inputs.source-directory }}/dist
      run: |
        index_file="$(ls -A | grep -iE readme\.html)"
        if [ -n "$index_file" ]; then
          mv -- "$index_file" index.html
        else
          echo "::warning::missing the main readme file thus no index.html has been generated"
        fi

    - name: 'Add the stylesheet file'
      shell: bash
      working-directory: ${{ inputs.source-directory }}/dist
      run: cp -- ${{ steps.vars.outputs.stylesheet }} .
